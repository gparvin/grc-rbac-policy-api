// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Item item
//
// swagger:model item
type Item struct {

	// managedcluster
	// Required: true
	// Min Length: 1
	Managedcluster *string `json:"managedcluster"`

	// namespace
	// Min Length: 1
	Namespace string `json:"namespace,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// user
	// Required: true
	// Min Length: 1
	User *string `json:"user"`
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManagedcluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateManagedcluster(formats strfmt.Registry) error {

	if err := validate.Required("managedcluster", "body", m.Managedcluster); err != nil {
		return err
	}

	if err := validate.MinLength("managedcluster", "body", *m.Managedcluster, 1); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateNamespace(formats strfmt.Registry) error {
	if swag.IsZero(m.Namespace) { // not required
		return nil
	}

	if err := validate.MinLength("namespace", "body", m.Namespace, 1); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if err := validate.MinLength("user", "body", *m.User, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this item based on context it is used
func (m *Item) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Item) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Item) UnmarshalBinary(b []byte) error {
	var res Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
