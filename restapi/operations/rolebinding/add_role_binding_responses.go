// Code generated by go-swagger; DO NOT EDIT.

package rolebinding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"open-cluster-management.io/grc-rbac-policy-api/models"
)

// AddRoleBindingOKCode is the HTTP code returned for type AddRoleBindingOK
const AddRoleBindingOKCode int = 200

/*
AddRoleBindingOK the data was successfully added to the role bindings cache

swagger:response addRoleBindingOK
*/
type AddRoleBindingOK struct {
}

// NewAddRoleBindingOK creates AddRoleBindingOK with default headers values
func NewAddRoleBindingOK() *AddRoleBindingOK {

	return &AddRoleBindingOK{}
}

// WriteResponse to the client
func (o *AddRoleBindingOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*
AddRoleBindingDefault generic error response

swagger:response addRoleBindingDefault
*/
type AddRoleBindingDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddRoleBindingDefault creates AddRoleBindingDefault with default headers values
func NewAddRoleBindingDefault(code int) *AddRoleBindingDefault {
	if code <= 0 {
		code = 500
	}

	return &AddRoleBindingDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the add role binding default response
func (o *AddRoleBindingDefault) WithStatusCode(code int) *AddRoleBindingDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the add role binding default response
func (o *AddRoleBindingDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the add role binding default response
func (o *AddRoleBindingDefault) WithPayload(payload *models.Error) *AddRoleBindingDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add role binding default response
func (o *AddRoleBindingDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddRoleBindingDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
