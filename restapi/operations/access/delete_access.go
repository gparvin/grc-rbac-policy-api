// Code generated by go-swagger; DO NOT EDIT.

package access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteAccessHandlerFunc turns a function with the right signature into a delete access handler
type DeleteAccessHandlerFunc func(DeleteAccessParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteAccessHandlerFunc) Handle(params DeleteAccessParams) middleware.Responder {
	return fn(params)
}

// DeleteAccessHandler interface for that can handle valid delete access params
type DeleteAccessHandler interface {
	Handle(DeleteAccessParams) middleware.Responder
}

// NewDeleteAccess creates a new http.Handler for the delete access operation
func NewDeleteAccess(ctx *middleware.Context, handler DeleteAccessHandler) *DeleteAccess {
	return &DeleteAccess{Context: ctx, Handler: handler}
}

/*
	DeleteAccess swagger:route DELETE /access access deleteAccess

DeleteAccess delete access API
*/
type DeleteAccess struct {
	Context *middleware.Context
	Handler DeleteAccessHandler
}

func (o *DeleteAccess) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteAccessParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
