// Code generated by go-swagger; DO NOT EDIT.

package rolebindings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetRoleBindingsHandlerFunc turns a function with the right signature into a get role bindings handler
type GetRoleBindingsHandlerFunc func(GetRoleBindingsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRoleBindingsHandlerFunc) Handle(params GetRoleBindingsParams) middleware.Responder {
	return fn(params)
}

// GetRoleBindingsHandler interface for that can handle valid get role bindings params
type GetRoleBindingsHandler interface {
	Handle(GetRoleBindingsParams) middleware.Responder
}

// NewGetRoleBindings creates a new http.Handler for the get role bindings operation
func NewGetRoleBindings(ctx *middleware.Context, handler GetRoleBindingsHandler) *GetRoleBindings {
	return &GetRoleBindings{Context: ctx, Handler: handler}
}

/*
	GetRoleBindings swagger:route GET /rolebindings rolebindings getRoleBindings

GetRoleBindings get role bindings API
*/
type GetRoleBindings struct {
	Context *middleware.Context
	Handler GetRoleBindingsHandler
}

func (o *GetRoleBindings) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetRoleBindingsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
